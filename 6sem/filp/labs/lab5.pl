/*1. Для каждой последовательности символов скажите, является ли она атомом,
переменной, сложным термом или вообще не термом:
 1. переменная - атом
 2. 'язык Пролог' - атом
 3. Пролог - переменная
 4. Альберт(любит, мясо) - не терм
 5. любит(Альберт, мясо) - сложный терм
*/

/*
2. Какие сопоставления удадутся (и с какими значениями переменных)?
 1. meal(food(Y), X) = meal(X, drink(Z)) - несопоставимо (food(Y) и drink(Z) — разные функторы)
 2. food(bread, X, beer) = food(Y, burger) - несопоставимо (разная арность)
 3. likes(X, cola) = likes(Y, cola) - сопоставимо (X=Y)
 4. 'bread' = bread - сопоставимо (атом в кавычках и без кавычек определяет один и тот же атом)
 5. likes(X, food(Y)) = likes(Y, food(Z)) - сопоставимо (X=Y, Y=Z)
*/

/*
3. Сформулируйте запрос на языке Prolog:
 1. Кто дед Сергея? 
 дед(Who, сергей).
 
 2. Есть ли у Алексея родители?
 родитель(Родитель, алексей).
*/

/*
4. Сформулируйте как правило на языке Prolog: Если у кого-то есть сын, у
которого есть свой сын, то у него есть внук.
*/
внук(Дедушка, Внук) :- родитель(Дедушка, Сын), родитель(Сын, Внук).
родитель(иван, петя).
родитель(петя, вася).

/*
5. В базе данных, описанной файлом family.pl, задайте правилами предикат
многодетен/1. Многодетным считается человек, имеющий минимум 3 детей. 
*/
многодетен(Родитель) :-
    родитель(Родитель, Ребенок1),
    родитель(Родитель, Ребенок2),
    родитель(Родитель, Ребенок3),
    Ребенок1 \= Ребенок2,
    Ребенок2 \= Ребенок3,
    Ребенок1 \= Ребенок3.

/*
6. Выберите тему для своей базы данных, например: фильмы, книги, растения и т.п.
Задайте хотя бы 3 предиката фактами (как мужчина/1, женщина/1 и родитель_ребёнок/2 в
family.pl) и 2 предиката правилами (как братья/2). В том числе хотя бы одно правило
должно быть рекурсивным
*/

% книга(Название, Автор, Жанр, Год_издания).
книга('Преступление и наказание', 'Федор Достоевский', 'Роман', 1866).
книга('Мастер и Маргарита', 'Михаил Булгаков', 'Фантастика', 1967).
книга('1984', 'Джордж Оруэлл', 'Антиутопия', 1949).
книга('Гарри Поттер и философский камень', 'Джоан Роулинг', 'Фэнтези', 1997).
книга('Властелин колец: Братство кольца', 'Джон Толкин', 'Фэнтези', 1954).
книга('Мертвые души', 'Николай Гоголь', 'Сатира', 1842).
книга('Евгений Онегин', 'Александр Пушкин', 'Роман в стихах', 1833).
книга('Идиот', 'Федор Достоевский', 'Роман', 1869).

% автор_жанр(Автор, Жанр).  Указывает, что автор писал в данном жанре
автор_жанр('Федор Достоевский', 'Роман').
автор_жанр('Михаил Булгаков', 'Фантастика').
автор_жанр('Джордж Оруэлл', 'Антиутопия').
автор_жанр('Джоан Роулинг', 'Фэнтези').
автор_жанр('Джон Толкин', 'Фэнтези').
автор_жанр('Николай Гоголь', 'Сатира').
автор_жанр('Александр Пушкин', 'Роман в стихах').

% год_жанр(Год_издания, Жанр).  Указывает, что в этот год вышли книги данного жанра.
год_жанр(1866, 'Роман').
год_жанр(1967, 'Фантастика').
год_жанр(1949, 'Антиутопия').
год_жанр(1997, 'Фэнтези').
год_жанр(1954, 'Фэнтези').
год_жанр(1842, 'Сатира').
год_жанр(1833, 'Роман в стихах').
год_жанр(1869, 'Роман').

% книги_автора(Автор, Список_книг).  Возвращает список книг данного автора.
книги_автора(Автор, Список_книг) :-
    findall(Название, книга(Название, Автор, _, _), Список_книг).

% книги_жанра(Жанр, Список_книг).  Возвращает список книг данного жанра.
книги_жанра(Жанр, Список_книг) :-
    findall(Название, книга(Название, _, Жанр, _), Список_книг).

% старые_книги(Год, Список_книг). Возвращает список книг, изданных до заданного года (включительно) - рекурсивное правило.
старые_книги(Год, Список_книг) :-
    старые_книги_helper(Год, [], Список_книг).

старые_книги_helper(Год, Аккумулятор, Список_книг) :-
    книга(Название, _, _, Год_издания),
    Год_издания =< Год,
    \+ member(Название, Аккумулятор),  % Чтобы не было дубликатов
    старые_книги_helper(Год, [Название | Аккумулятор], Список_книг), !. %  Убираем цикл обратно
старые_книги_helper(_, Список_книг, Список_книг).

% книги_автора('Федор Достоевский', Книги).
% книги_жанра('Фэнтези', Книги).
% старые_книги(1900, Книги).

/*
7. Дана база полётов между городами.
Определите предикат связаны(X, Y), который выполняется, если из города X в город Y
можно попасть за один или больше рейсов.
*/
есть_рейс(мос,спб).
есть_рейс(мос,ект).
есть_рейс(мос,новосиб).
есть_рейс(спб,новосиб).
есть_рейс(спб,сочи).
есть_рейс(спб,минск).
есть_рейс(ект,сочи).
есть_рейс(сочи,киев).
есть_рейс(минск,новосиб).
есть_рейс(минск,киев).

связаны(X, Y) :- есть_рейс(X, Y).
связаны(X, Y) :- есть_рейс(X, Z), связаны(Z, Y).
% связаны(мос,киев).
% связаны(спб,ект).